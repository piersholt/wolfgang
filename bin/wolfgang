#!/usr/bin/env ruby

# frozen_string_literal: true

puts "Wolfgang Copyright (C) 2019 Piers Holt\n"\
     "This program comes with ABSOLUTELY NO WARRANTY.\n"\
     "This is free software, and you are welcome to redistribute it\n"\
     'under certain conditions.'

begin
  require 'bundler/setup'
  # Gems
  require 'dbus'
  require 'figaro'
  require 'pry-byebug'
  require 'wilhelm/tools'
  # Ruby
  require 'optparse'
  require 'ostruct'
  require 'observer'

  LOGGER = LogActually.is_all_around(:default)
  LogActually.default.i
  PROG_NAME = 'wolfgang'

# *************************************************************************** #
#                                  LOAD PATHS                                 #
# *************************************************************************** #

  load_path = File.expand_path(File.dirname(__FILE__) + '/../lib')
  $LOAD_PATH.unshift(load_path) unless $LOAD_PATH.include?(load_path)

# *************************************************************************** #
#                              CLI OPTIONS                                    #
# *************************************************************************** #

  options = OpenStruct.new
  options.environment = 'development'
  options.console = true

  OptionParser.new do |opts|
    opts.banner = 'Usage: run -e development -c'

    opts.on('-c', '--console', 'Open Walter console') do |c|
      options.console = c
    end

    opts.on('-e ENVIRONMENT', '--envrionment= ENVIRONMENT', 'Runtime environment') do |e|
      options.environment = e
    end
  end.parse!


# *************************************************************************** #
#                                  CONFIG                                     #
# *************************************************************************** #

  Figaro::Application.new(path: 'config/application.yml', environment: options[:environment])&.load
  Figaro.require_keys(%w[publisher_host publisher_port subscriber_host subscriber_port server_host server_port])
rescue LoadError => e
  # LogActually.default.error('run') { e }
  puts e
  e.backtrace.each { |line| puts line }
  $LOAD_PATH.each { |line| puts line }
  exit
rescue StandardError => e
  puts e
  e.backtrace.each { |line| puts line }
end

begin
  LOGGER.debug(PROG_NAME) { 'Require local dependencies' }
  require 'wolfgang'
rescue LoadError => e
  LOGGER.error(PROG_NAME) { 'Dependencies load error!' }
  LOGGER.error(PROG_NAME) { e }
  e.backtrace.each { |line| LOGGER.error(PROG_NAME) { line } }
  $LOAD_PATH.each  { |path| LOGGER.error(PROG_NAME) { path } }
rescue StandardError => e
  LOGGER.error(PROG_NAME) { 'Dependencies standard error?' }
  LOGGER.error(PROG_NAME) { e }
  e.backtrace.each { |line| LOGGER.error(PROG_NAME) { line } }
end

begin
  t = Thread.current
  t[:name] = 'Main Thread'

  LOGGER.info(PROG_NAME) { 'Starting Publisher...' }
  connection_options = {
    port: ENV['publisher_port'],
    host: ENV['publisher_host']
  }
  LOGGER.debug(PROG_NAME) { "Publisher connection options: #{connection_options}" }
  Publisher.params(connection_options)
  LOGGER.info(PROG_NAME) { 'Publisher started...' }

  LOGGER.info(PROG_NAME) { 'Hack-McHackFace. Headless Pi has no PulseAudio autostart' }
  Thread.new { puts `pactl list sinks` }
  LOGGER.info(PROG_NAME) { 'Hack-McHackFace done...' }

  LOGGER.info(PROG_NAME) { 'Starting VirtualCarKit' }
  virtual_car_kit = Wolfgang::VirtualCarKit.new
  LOGGER.info(PROG_NAME) { 'VirtualCarKit start delay...' }
  sleep(3)
  virtual_car_kit.start
rescue StandardError => e
  LOGGER.error(PROG_NAME) { 'Error starting app' }
  LOGGER.error(PROG_NAME) { e }
  e.backtrace.each { |line| LOGGER.error(PROG_NAME) { line } }
end

LOGGER.info(PROG_NAME) { 'All over, red rover!' }

exit
