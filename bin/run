#!/usr/bin/env ruby

# frozen_string_literal: true

begin
  require 'rubygems'
  require 'bundler/setup'

  require 'pry-byebug'

  if ENV['BUNDLE_GEMFILE']
    root_path = File.dirname(ENV['BUNDLE_GEMFILE'])
    lib_path = root_path + '/lib'
    $LOAD_PATH.unshift(lib_path)
    ext_path = root_path + '/ext'
    $LOAD_PATH.unshift(ext_path)
  end
  
  require 'log_actually'

  # Bluez
  LogActually.is_all_around(:root)
  LogActually.root.i
  LogActually.is_all_around(:properties)
  LogActually.properties.i
  LogActually.is_all_around(:device)
  LogActually.device.i
  LogActually.is_all_around(:player)
  LogActually.player.i
  LogActually.is_all_around(:media_transport)
  LogActually.media_transport.i
  LogActually.is_all_around(:media_browser)
  LogActually.media_browser.i
  LogActually.is_all_around(:controller)
  LogActually.controller.i

  # Bluetooth Profiles
  LogActually.is_all_around(:target)
  LogActually.target.i

  LOGGER = LogActually.is_all_around(:default)
  LogActually.default.i
rescue LoadError => e
  LOGGER.error('bin') { 'Dependencies load error!' }
  LOGGER.error('bin') { e }
  e.backtrace.each { |line| LOGGER.error('bin') { line } }
  LOGGER.error('bin') { lib_path }
rescue StandardError => e
  LOGGER.error('bin') { 'Dependencies standard error?' }
  LOGGER.error('bin') { e }
  e.backtrace.each { |line| LOGGER.error('bin') { line } }
  LOGGER.error('bin') { lib_path }
rescue Interrupt
  Signal.trap(0, proc { puts "Terminating: #{$$}" })
  # LOGGER.close
  exit
# ensure
#   exit
end

# LOGGER = get_logger

LOGGER.debug('bin') { 'Require local dependencies' }

begin
  require '1-dbus-decorator/dbus-decorator'
  require '2-bluez-dbus/bluez-dbus'
  require '3-bluez-manager/bluez-manager'
  require '3-bluetooth-profiles/bluetooth-profiles'
  require 'yabber/yabber'
  require '6-virtual-car-kit/virtual-car-kit'
rescue LoadError => e
  LOGGER.error('bin') { 'Dependencies load error!' }
  LOGGER.error('bin') { e }
  e.backtrace.each { |line| LOGGER.error('bin') { line } }
  LOGGER.error('bin') { lib_path }
  quit
rescue StandardError => e
  LOGGER.error('bin') { 'Dependencies standard error?' }
  LOGGER.error('bin') { e }
  e.backtrace.each { |line| LOGGER.error('bin') { line } }
  LOGGER.error('bin') { lib_path }
  quit
end

begin
  t = Thread.current
  t[:name] = 'Main Thread'
  virtual_car_kit = VirtualCarKit.new
  virtual_car_kit.run
rescue StandardError => e
  LOGGER.error('bin') { 'Error starting app' }
  LOGGER.error('bin') { e }
  e.backtrace.each { |line| LOGGER.error('bin') { line } }
end

LOGGER.info('bin') { 'All over, red rover' }

exit
