#!/usr/bin/env ruby

# frozen_string_literal: true

require 'rubygems'
require 'bundler/setup'

if ENV['BUNDLE_GEMFILE']
  root_path = File.dirname(ENV['BUNDLE_GEMFILE'])
  lib_path = root_path + '/lib'
  $LOAD_PATH.unshift(lib_path)
end

require 'cheap_logger'
require 'pry-byebug'

LOGGER = get_logger

LOGGER.debug('bin/dbus') { 'Require local dependencies' }

begin
  require 'dbus-decorator/dbus-decorator'
  require 'bluez-dbus/bluez-dbus'
rescue LoadError => e
  puts 'load error'
  puts e
  puts lib_path
  puts $LOAD_PATH
  binding.pry
rescue StandardError => e
  puts 'standard error'
  puts e
  puts lib_path
  puts $LOAD_PATH
  binding.pry
end

LOGGER.debug('bin/dbus') { 'initialise DBus' }

CONTROLLER = 1
DEVICE = '70:70:0D:11:CF:29'

begin
  controller_listener = BluezControllerListener.new
  controller_listener.register_handler(BluezAdapterHandler.new)

  device_listener = BluezDeviceListener.new
  device_listener.register_handler(BluezDeviceHandler.new)
  media_control_handler = BluezMediaControlHandler.new
  device_listener.register_handler(media_control_handler)

  b = DBusAdapter.system_bus
  s = b.service('org.bluez', BluezService)
  media_control_handler.service = s

  c = s.controller_object(CONTROLLER)
  c.add_observer(controller_listener)
  c.subscribe_to_changes

  d = s.device_object(CONTROLLER, DEVICE)
  d.add_observer(device_listener)
  d.subscribe_to_changes
rescue StandardError => e
  puts 'standard error'
  puts e
  puts e.backtrace
  binding.pry
end

def po(service, path = '/org/bluez/hci1/dev_70_70_0D_11_CF_29/player0')
  LOGGER.debug(self.class) { 'Get player object' }
  player_object = service.player_object_full(path)

  player_listener = BluezPlayerListener.new
  player_listener.register_handler(BluezMediaPlayerHandler.new)

  LOGGER.debug(self.class) { 'Add listener' }
  player_object.add_observer(player_listener)
  LOGGER.debug(self.class) { 'Subscribe to signals' }

  player_object.introspect

  player_object.subscribe_to_changes do |resp|
    LOGGER.warn(self.class) { "subscribe response? #{resp}" }
  end

  LOGGER.debug(self.class) { 'returning player object' }

  player_object
end

def loopy(bus = b)
  puts 'start loop'

  begin
    loop = DBus::Main.new
    loop << bus
    loop.run
  rescue StandardError => e
    puts 'standard error'
    puts e
    puts e.backtrace
  end
end

Thread.new(b) do
  loopy(b)
end

po(s)

binding.pry

# b = DBus.system_bus
# s = b['org.bluez']

# each controller is represented by an object
# controller interfaces are:
# Adapter1, GattManager1
# interfaces = w%(Adapter1 GattManager1 Media1 NetworkServer1)
# controller = s.object('/org/bluez/hci1')

puts 'exiting...'
exit
